import javax.swing.JOptionPane;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParsePosition;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import pyramid.StringAlignUtils.Alignment;

/**
 *
 * @author Damion
 */
public class Pyramid {
    
        int number;
String str;

String h;
str = JOptionPane.showInputDialog("Enter a number.");
number = Integer.parseInt(str);
        h =(pyr(number));
       JOptionPane.showMessageDialog(null,h);
       
      
       
       System.exit(0);

        
    }

    public static boolean containsDuplicate(int[] nums) {

        int duplicate = 0;
        for (int i = 0; i <= nums.length - 1; i++) {
            for (int j = 0; j < i; ++j) {
                if (nums[j] == nums[i]) {
                    duplicate +=1;
                }
            }
            if (nums.length == 0) {
                return false;
            }
            if (duplicate > 0) {
                return true;
            }
        }
        return false;
    }
    
     public int getSum(int a, int b) {  // without using + or -
       
   return (b == 0)? a : getSum(a ^ b, (a & b) << 1);
    }
  public static boolean containsNearbyDuplicate(int[] nums, int k) {
 
        Set<Integer> set = new HashSet<Integer>();
        for(int i = 0; i < nums.length; i++){
            if(i > k) set.remove(nums[i-k-1]);
            if(!set.add(nums[i])) return true;
        }
        return false;
    }
    public static boolean wordPattern(String pattern, String str) {

        String temp[] = str.split(" ");

        if (pattern == "abba") {
            if (!temp[0].equals(temp[1]) && temp[1].equals(temp[2]) && !temp[2].equals(temp[3])) {
                return true;
            } else {
                return false;
            }
        }

        if (pattern == "aaaa") {
            if (temp[0].equals(temp[1]) && temp[0].equals(temp[2]) && temp[0].equals(temp[3])) {
                return true;
            } else {
                return false;
            }
        }
        return false;

    }
       public int longestPalindrome(String s) {
        int[] count = new int[128];
        for (char c: s.toCharArray())
            count[c]++;

        int ans = 0;
        for (int v: count) {
            ans += v / 2 * 2;
            if (ans % 2 == 0 && v % 2 == 1)
                ans++;
        }
        return ans;
    }

    public static int lengthOfLastWord(String s) {
        String temp[] = s.split(" ");

        String lastWord = s.substring(s.lastIndexOf(" ") + 1);
        int cases = 0;
        int d;
        d = lastWord.length();

        char[] charAnalysis = s.toCharArray();
        for (char element : charAnalysis) {
            if (Character.isLowerCase(element)) {
                cases++;
            }

        }
        if (s.length() == 0 || s == " ") {
            d = 0;

        } else if (s.length() == 1 && s != " ") {
            d = 1;
        } else if (d == 0) {
            d = cases;
        }

        return d;
    }
    
        public static String pyr(int rows) {
        String result = "";
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j <= i; j++) {
                result += "*";
            }
            result += "\n";
        }

        return result;
    }
    

    public static String py(int s) {
        String d = "";

        for (int i = 1; i <= s; i++) {
            for (int j = 1; j <= i; j++) {
                d += ('*');
            }
            d += "\n";
        }

        for (int h = 1; h <= s; h++) {
            for (int j = 1; j <= s - h; j++) {
                d += "*";
            }
            d += "\n";

            d += "\t";
        }

        return ((d));

    }
}


    /**
     * ParseObject is required, but not useful here.
     */
    public Object parseObject(String source, ParsePosition pos) {
        return source;
    }

    private List<String> splitInputString(String str) {
        List<String> list = new ArrayList<String>();
        if (str == null) {
            return list;
        }
        for (int i = 0; i < str.length(); i = i + maxChars) {
            int endindex = Math.min(i + maxChars, str.length());
            list.add(str.substring(i, endindex));
        }
        return list;
    }
}
